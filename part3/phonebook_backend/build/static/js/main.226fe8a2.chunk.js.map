{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Person.js","components/DisplayPersons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Person","person","drop","name","number","onClick","DisplayPersons","persons","map","key","Notification","message","errorMessage","className","App","useState","setPersons","setNewName","setNewNumber","notificationMessage","setNotificationMessage","setErrorMessage","useEffect","personService","initialPersons","event","preventDefault","personObject","updatablePerson","find","toLowerCase","window","confirm","returnedPerson","setTimeout","p","catch","error","filter","concat","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.226fe8a2.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst drop = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n} \n\nexport default { getAll, create, update, drop }","import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n  <form onSubmit={props.addPerson}>\n    <div>\n      name: <input value={props.newName} onChange={props.handleNameChange} />\n    </div>\n    <div>\n      number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n  )\n}\n\n\nexport default PersonForm\n","import React from 'react'\n\nconst Person = ({ person, drop} ) => {\n  return (\n    <div>\n    \t{person.name} {person.number}\n    \t<button onClick={() => drop(person.id)}>delete</button>\n\n    </div>\n    )\n}\n\nexport default Person\n","import React from 'react'\nimport Person from './Person'\n\nconst DisplayPersons = ({ persons, drop }) => {\n  return (\n      <div>\n        {persons.map((person) => \n          <Person key={person.id} person={person} drop={drop} /> \n        )}\n      </div>\n  )\n}\n\n\nexport default DisplayPersons\n","import React from 'react'\n\n\nconst Notification = ({ message, errorMessage }) => {\n  if (message === null && errorMessage === null) {\n    return null\n  }\n\n  if (errorMessage) {\n    return (\n      <div className='error'>\n        {errorMessage}\n      </div>\n    )\n  }\n  \n  if (message) {\n    return (\n      <div className='success'>\n        {message}\n      </div>\n    )\n  }\n}\n\n\nexport default Notification\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons'\nimport PersonForm from './components/PersonForm'\nimport DisplayPersons from './components/DisplayPersons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ notificationMessage, setNotificationMessage] = useState(null)\n  const [ errorMessage, setErrorMessage] = useState(null)\n\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }\n\n  useEffect(hook, [])\n\n  const dropPerson = (id) => {\n    const person = persons.find(p => p.id === id)\n\n    if (window.confirm(`Are you sure you want to delete '${person.name}'?`)) {\n      personService\n        .drop(id)\n        .then(returnedPerson => {\n          setNotificationMessage(\n            `the person '${person.name}' was deleted successfully`\n            )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n        .catch(error => {\n          setErrorMessage(\n            `the person '${person.name}' was already deleted from server`\n            )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      }\n\n\n    const updatablePerson = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())  \n    if (updatablePerson) {\n      if (window.confirm(`${newName} is already in phonebook. Do you want to update the number?`)) {\n        personService\n          .update(updatablePerson.id, personObject)\n          .then(returnedPerson => {\n            setNotificationMessage(\n            `the number was updated successfully`\n            )\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n            setPersons(persons.map(p => p.id !== updatablePerson.id ? p : returnedPerson))\n          })\n          .catch(error => {\n            setErrorMessage(\n              `the person was already deleted from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n            setPersons(persons.filter(p => p.id !== updatablePerson.id))\n        })\n        setNewName('')\n        setNewNumber('')\n      }\n    } else {\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            setNotificationMessage(\n              `the person was added successfully`\n            )\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n            setPersons(persons.concat(returnedPerson))\n          })\n          .catch(error => {\n            setErrorMessage(\n              `${error.response.data.error}`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n          setNewName('')\n          setNewNumber('')\n      }\n  \n  }\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={notificationMessage} errorMessage={errorMessage} />\n      <h2>Phonebook</h2>\n        <PersonForm addPerson={addPerson} handleNameChange={handleNameChange} \n          newName={newName} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n        <DisplayPersons persons={persons} drop={dropPerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}